/**
 * 组合模式（Composite Pattern）也叫合成模式，用来描述部分与整体的关系。
 * 组合模式的定义：Compose objects into tree structures to represent part-whole hierarchies.
 * 				Composite lets clients treat objects and compositions of objects uniformly.
 * 意思是：将对象合成树形结构以表示“部分-整体”的层次结构，使得用户对于单个对象和组合对象的使用具有一致性。
 * 
 * 组合对象提供以下3个角色：
 * 	（1）抽象构件（Component）角色：该角色定义参加组合对象的共有方法和属性，规范一些默认的行为接口。
 * 	（2）叶子构件（Leaf）角色：该角色是叶子对象，其下没有其他的分支，定义出参加组合的原始对象的行为。
 * 	（3）树枝构件（Composite）角色：该角色代表参加组合的、其下有分支的树枝对象，它的作用是将树枝和
 * 							叶子组合成一个树形结构，并定义出管理子对象的方法，如add(),remove()等。
 * 
 * 组合模式的优点：
 * 	（1）高层模块调用简单。一颗树形结构中的所有节点都是Component，局部和整体对调用者来说没有任何区别，
 * 		即高层模块不必关心自己处理的是单个对象还是整个组合结构，简化了高层模块代码。
 * 	（2）节点自有增加。使用组合模式后，如果想增加一个树枝节点、树叶节点只需要找到其父节点即可。
 * 组合模式的缺点：
 * 	（1）不易控制树枝构件的类型；
 * 	（2）不易使用继承的方法来增加新的行为。
 * 
 * 组合模式的使用场景：
 * 	（1）需要描述对象的部分和整体的等级结构，如树形菜单、文件和文件夹管理。
 * 	（2）需要客户端忽略个体构件和组合构件的区别，平等对待所有的构件。
 * 	（3）Java基本类库的swing部分就大量使用了组合模式，大部分控件都是JComponent的子类，同时其add()方法
 * 		又可向界面添加JComponent类型的控件，从而使得使用者可以以统一的方式操作各种控件。
 */
/**
 * @author zhengtaishuai
 *
 */
package 组合模式;