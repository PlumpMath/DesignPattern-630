/**
 * 享元模式（Flyweight Pattern）是池技术的重要实现方式，可以降低大量重复的、细粒度的类在内存中的开销。
 * 
 * 享元模式的定义：Use sharing to support large numbers of fine-grained objects efficiently.
 * 		享元模式是以共享的方式高效地支持大量的细粒度对象。享元模式能做到共享的关键是区分内部状态
 * 		（Internal State）和外部状态（External State）。
 * 		1.内部状态是存储在享元对象内部的、可以共享的信息，并且不会随环境改变而改变。
 * 		2.外部状态是随环境改变而改变且不可以共享的状态。享元对象的外部状态必须由客户端保存，并且在享元
 * 		对象被创建之后，在需要使用的时候再传入到享元对象内部。
 * 
 * 享元对象具有以下4个角色：
 * 	（1）抽象享元（Flyweight）角色：该角色对享元类进行抽象，需要外部状态的操作可以通过参数的形式
 * 		将外部状态传入。
 * 	（2）具体享元（ConcreteFlyweight）角色：该角色实现抽象享元定义的业务，注意享元对象的内部状态必须与环境无关，从而
 * 		使得享元对象可以在系统内共享。
 * 	（3）享元工厂（FlyweightFactory）角色：该角色就是构造一个池容器，负责创建和管理享元角色，并提供从池容器中获取对象的
 * 		方法，保证享元对象可以被系统
 */
/**
 * @author zhengtaishuai
 *
 */
package 享元模式;